import { CopyInput } from "@/components/CopyInput";
import { Modal } from "@/components/Modal";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { createTeamSchema, type CreateTeamFormValues } from "@/schemas/teams";
import api from "@/utils/api";
import { API_ROUTES } from "@/utils/constants";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, type ReactNode } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

interface CreateTeamDialogProps {
  trigger: ReactNode;
}

export function CreateTeamModal({ trigger }: CreateTeamDialogProps) {
  const {
    register,
    handleSubmit,
    setValue,
    watch,
    reset,
    formState: { errors },
  } = useForm<CreateTeamFormValues>({
    resolver: zodResolver(createTeamSchema),
    defaultValues: {
      name: "",
      code: "",
    },
  });

  const onSubmit = async (values: CreateTeamFormValues) => {
    try {
      const response = await api.post(API_ROUTES.TEAMS.TEAMS, values);

      if (response.data?.success === true) {
        reset()
        toast.success(response.data?.message);
      } else {
        toast.error(response.data?.message);
      }
    } catch {
      toast.error(
        "Some Internal Server Error occured, please try again later!"
      );
    }
  };

  useEffect(() => {
    const getAutogeneratedTeamCode = async () => {
      try {
        const response = await api.get(API_ROUTES.TEAMS.AUTOGENERATE_TEAM_CODE);

        if (response.data?.success === true) {
          const code = response.data?.data?.code;
          setValue("code", code);
        }
      } catch {
        toast.error("Couldn't autogenerate Team code!");
      }
    };

    getAutogeneratedTeamCode();
  }, [setValue]);

  return (
    <Modal
      trigger={trigger}
      submitButtonText="Save"
      title="Create New Team"
      description="Enter your team details and click Save when you're done."
      content={
        <form
          onSubmit={handleSubmit(onSubmit)}
          id="create-team-form" // Give the form an id to link with modal's submit
        >
          <div className="grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                {...register("name")}
                placeholder="My Awesome Team"
              />
              {errors.name && (
                <p className="text-sm text-red-500 mt-1">
                  {errors.name.message}
                </p>
              )}
            </div>
            <div className="grid gap-2">
              <Label htmlFor="code">Code</Label>
              <CopyInput value={watch("code")} />
            </div>
          </div>
        </form>
      }
      formId="create-team-form"
    />
  );
}
